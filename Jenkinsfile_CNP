#!groovy
properties(
  [
    [
      $class       : 'GithubProjectProperty',
      projectUrlStr: 'https://github.com/hmcts/rd-location-ref-data-load'
    ],
    pipelineTriggers([[$class: 'GitHubPushTrigger']])
  ]
)

@Library("Infrastructure")
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig


def type = "java"
def product = "rd"
def component = "location-ref-data-load"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

def secrets = [
  'rd-${env}': [
    secret('ACCOUNT-KEY-PREVIEW', 'ACCOUNT_KEY_PREVIEW'),
    secret('rd-location-storage-account-name', 'ACCOUNT_NAME'),
    secret('rd-location-storage-account-primary-key', 'ACCOUNT_KEY')
  ]
]

// Configure branches to sync with master branch
def branchesToSync = ['ithc', 'perftest']

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  env.CONTAINER_NAME = "lrd-ref-data"
  onMaster {
    enableSlackNotifications('#rd-location-ref-data-load-builds')
    env.execution_environment = "aat"
  }
  onPR {
    enableSlackNotifications('#rd-location-ref-data-load-builds')
    env.execution_environment = "preview"
  }
  enableAksStagingDeployment()
  disableLegacyDeploymentOnAAT()
  disableLegacyDeployment()
  nonServiceApp()

  // Sync demo and perftest with master branch
  syncBranchesWithMaster(branchesToSync)

  after('integrationTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }
  after('integrationTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }
  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }
  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  after('akschartsinstall') {
    def sleepTime = (env.BRANCH_NAME.startsWith("PR")) ? '210s' : '120s'
    sh "sleep ${sleepTime}"
    if (env.BRANCH_NAME.startsWith("PR")) {
      withAksClient('nonprod', product) {

        def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT, env.LAST_COMMIT_TIMESTAMP)
        def subscription = env.SUBSCRIPTION_NAME
        def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
        def blobSecret = "storage-secret-${aksServiceName}"
        def namespace = new TeamConfig(this).getNameSpace(product)
        def kubectl = new Kubectl(this, subscription, namespace)
        kubectl.login()
        env.BLOB_ACCOUNT_NAME = kubectl.getSecret(blobSecret, namespace, "{.data.storageAccountName}")
        env.BLOB_ACCOUNT_KEY = kubectl.getSecret(blobSecret, namespace, "{.data.accessKey}")
      }
    }
      try {
        builder.gradle('functional')
      } finally {
        junit '**/test-results/**/*.xml'
        junit 'build/test-results/functional/**/*.xml'
        archiveArtifacts 'build/reports/tests/functional/index.html'

        publishHTML target: [
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "build/reports/tests/functional",
          reportFiles          : "index.html",
          reportName           : "LRD Functional Test Report"
        ]
      }

    }
}
